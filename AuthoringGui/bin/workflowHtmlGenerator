#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";

use FgpUtil::Runtime::CommandHelper;

use File::Basename;
use File::stat;
use File::Spec;

use Cwd;

my $GUS_HOME = $ENV{GUS_HOME};
my $PROJECT_HOME = $ENV{PROJECT_HOME};
my $CLASSPATH = &FgpUtil::Runtime::CommandHelper::getJavaClasspath($GUS_HOME);
my $sysProps = &FgpUtil::Runtime::CommandHelper::getSystemProps($GUS_HOME, 'workflowHtmlGenerator');

my $IMAGES_DIR = "images_";
my $XML_DIR = "xml_";

sub main { # takes two args: input file/directory, output directory

    $inputFile = absolutePath($_[0]);
    $outputLoc = absolutePath($_[1]);
    %results = ( 'TRY', 0, 'FAIL', 0, 'UTD', 0, 'SUCCESS', 0 );

    # if single file is passed, just parse it
    if (-f $inputFile) {
	$results{'TRY'}++;
	$results{buildHtml($inputFile, $outputLoc, "")}++;
    }
    # if directory is passed, parse each xml inside and rebuild index
    elsif (-d $inputFile) {
	@names = `ls $inputFile/*.xml`;
	foreach $name(@names) {
	    chomp($name);
	    $results{'TRY'}++;
	    $results{buildHtml($name, $outputLoc, "")}++;
	}
	buildIndex($outputLoc);
    }
    else {
        # should never get here; file already checked
	printf(STDERR "ERROR: $inputFile is not a file or directory\n");
	return 1;
    }

    printf("Num HTML attempted:   $results{'TRY'}\n");
    printf("Num HTML completed:   $results{'SUCCESS'}\n");
    printf("Num HTML up-to-date:  $results{'UTD'}\n");
    printf("Num HTML failed:      $results{'FAIL'}\n");

    return 0;
}

sub mainRecurse { # takes two args: input file/directory, output directory

    $inputDir = absolutePath($_[0]);
    $outputLoc = absolutePath($_[1]);
    %results = ( 'TRY', 0, 'FAIL', 0, 'UTD', 0, 'SUCCESS', 0 );
    
    if (!(-e $outputLoc)) {
        printf("Generating $outputLoc/...");
	system("mkdir $outputLoc");
        printf("done.\n");
    }

    chdir("$inputDir/..");

    $inputDirName = basename($inputDir);
    @names = `ls -1 -R $inputDirName`;

    $reset = 1;
    $currentDir = "";
    foreach $name(@names) {
        chomp($name);
        if ($name eq "") {
            $reset = 1;
	}
	elsif ($reset == 1) {
            $reset = 0;
            $currentDir = $name;
            $currentDir =~ s/://g;
	    #printf("Will now work with $currentDir\n");
	}
	elsif ($name =~ /.xml$/) {
	    #printf("Found XML file in $currentDir: $name\n");
	    $results{'TRY'}++;
	    $results{buildHtml("$currentDir/$name", "$outputLoc/$currentDir", "--backtrack $currentDir")}++;
	}
    }
    buildIndex($outputLoc);

    printf("Num HTML attempted:   $results{'TRY'}\n");
    printf("Num HTML completed:   $results{'SUCCESS'}\n");
    printf("Num HTML up-to-date:  $results{'UTD'}\n");
    printf("Num HTML failed:      $results{'FAIL'}\n");

    return 0;
}

sub absolutePath {
    $filesDir = $_[0];
    if (!File::Spec->file_name_is_absolute($filesDir)) {
	#printf "Converted relative path to absolute: $filesDir -> ";
        $filesDir = File::Spec->rel2abs($filesDir);
        #printf "$filesDir\n";
    }
    return $filesDir;
}

sub buildHtml { # three args: XML file, output directory, additional java options

    $fileToParse = $_[0];
    $outputDir = $_[1];
    $javaOpts = $_[2];

    $fileName = basename($fileToParse);

    $htmlName = $fileName;
    $htmlName =~ s/\.xml/\.html/;

    $imageName = $fileName;
    $imageName =~ s/\.xml/\.gif/;

    if (!(-e $outputDir)) {
        printf("Generating $outputDir/...");
	system("mkdir $outputDir");
        printf("done.\n");
    }
    # mkdir -p was throwing error for images (??)
    if (!(-e "$outputDir/$IMAGES_DIR")) {
	printf("Generating $outputDir/$IMAGES_DIR/...");
        system("mkdir $outputDir/$IMAGES_DIR");
	printf("done.\n");
    }
    if (!(-e "$outputDir/$XML_DIR")) {
	printf("Generating $outputDir/$XML_DIR/...");
        system("mkdir $outputDir/$XML_DIR");
	printf("done.\n");
    }

    # copy xml file over so html page can link to it
    system("cp $fileToParse $outputDir/$XML_DIR");

    printf("Generating $outputDir/$htmlName...");

    if (-f "$outputDir/$htmlName") {
        $htmlModTime = stat("$outputDir/$htmlName")->mtime;
        $xmlModTime = stat("$fileToParse")->mtime;
        if ($htmlModTime > $xmlModTime) {
	    printf("up to date.\n");
	    return 'UTD';
	}
    }

    $cmd = "java $sysProps -classpath $CLASSPATH org.gusdb.workflow.authoring.DotFileBuilder $javaOpts $fileToParse > tmp.dot";
    system($cmd);

    $exitCode = ($? >> 8);
    if ($exitCode != 0) {
	printf(STDERR "failure in DotFileBuilder.\n");
        system("rm tmp.dot");
        return 'FAIL';
    }

    system("dot -Tcmapx_np -otmp.map -Tgif -o$outputDir/$IMAGES_DIR/$imageName tmp.dot");

    $exitCode = ($? >> 8);
    if ($exitCode != 0) {
	printf(STDERR "failure in dot.\n");
        system("rm tmp.dot");
        return 'FAIL';
    }

    open(HTML_FILE, ">$outputDir/$htmlName");
    printf HTML_FILE "<html><body><div>";
    printf HTML_FILE "  <div style=\"position:fixed; left:30px; margin-top:10px; margin-bottom:10px; font-weight:bold; font-size:12pt\">\n";
    printf HTML_FILE "    <span><a href=\"$XML_DIR/$fileName\">$fileName</a><span>\n";
    printf HTML_FILE "  </div>\n";
    printf HTML_FILE "  <img style=\"border:0px; padding-top:45px\" src=\"$IMAGES_DIR/$imageName\" usemap=\"#name\"/>\n";

    # append the map contents
    open(MAP_FILE, "<tmp.map");
    while (<MAP_FILE>) {
	printf HTML_FILE "$_\n";
    }
    close(MAP_FILE);

    printf HTML_FILE "</div></body></html>\n";
    close(HTML_FILE);
    system("rm -f tmp.map tmp.dot");
    printf("done.\n");
    return 'SUCCESS';
}

sub buildIndex { # one arg: output directory

    $outputDir = $_[0];

    # remove old html files so they're not placed in the index
    system("rm -rf $outputDir/js $outputDir/index.html $outputDir/menu.html $outputDir/welcome.html");

    # generate menu.html
    printf("Generating $outputDir/menu.html...");
    generateMenu($outputDir);
    printf("done.\n");

    # copy javascript/css libs into output directory
    system("cp -r $PROJECT_HOME/ReFlow/AuthoringGui/lib/js $outputDir");

    # generate index.html
    printf("Generating $outputDir/index.html...");
    open(INDEX, ">$outputDir/index.html");
    printf INDEX "<html><head><title>Workflow Authoring GUI</title></head><frameset cols=\"25%,75%\">";
    printf INDEX "<frame name=\"left\" src=\"menu.html\"/>";
    printf INDEX "<frame name=\"right\" src=\"welcome.html\"/>";
    printf INDEX "</frameset></html>";
    close(INDEX);
    printf("done.\n");

    # generate welcome.html
    printf("Generating $outputDir/welcome.html...");
    open(INDEX, ">$outputDir/welcome.html");
    printf INDEX "<html><body><h2>Workflow Viewer</h2><p>\n";
    printf INDEX "Click the links to the left to view workflow diagrams.\n";
    printf INDEX "</p></body></html>\n";
    close(INDEX);
    printf("done.\n");
}

sub generateMenu { # one arg: output directory

    $outputDir = $_[0];
    $outputDirName = basename($outputDir);
    chdir($outputDir);
    @names = `ls -1 -R`;

    $reset = 1;
    $validDir = true;
    $currentDir = "";
    local %fileHash;

    foreach $name(@names) {
        chomp($name);
        $name =~ s/^\.\///;
        if ($name eq "") {
            $reset = 1;
	}
	elsif ($reset == 1) {
            $reset = 0;
            $currentDir = $name;
            $currentDir =~ s/://g;
            if ( $currentDir =~ /[$IMAGES_DIR|$XML_DIR]$/ ) {
		$validDir = false;
	    }
	    else {
		$validDir = true;
                @fileHash[$currentDir] = ();
	    }
	}
	elsif ($name =~ /.html$/ && $validDir) {
	    $graphName = $name;
	    $graphName =~ s/\.html//;
            push(@{$fileHash{$currentDir}}, $name);
	}
    }

    open(MENU, ">$outputDir/menu.html");
    printf MENU "<html>\n";
    printf MENU "  <head>\n";
    printf MENU "    <script type=\"text/javascript\" src=\"js/_lib/jquery.js\">/*-*/</script>\n";
    printf MENU "    <script type=\"text/javascript\" src=\"js/jquery.jstree.js\">/*-*/</script>\n";
    printf MENU "    <script type=\"text/javascript\">\n";
    printf MENU "      \$(function() {\n";
    printf MENU "        \$('#mytree')\n";
    printf MENU "          .jstree({\n";
    printf MENU "            \"core\" : { \"initially_open\" : [ \"root\" ] },\n";
    printf MENU "            \"plugins\" : [ \"themes\", \"html_data\", \"types\" ],\n";
    printf MENU "            \"themes\" : { \"theme\" : \"classic\" },\n";
    printf MENU "            \"types\" : { \"types\" : { \"file\" : { \"icon\" : { \"image\" : \"js/graphFileIcon-16x16.gif\" }}}}\n";
    printf MENU "        });\n";
    printf MENU "      });\n";
    printf MENU "    </script>\n";
    printf MENU "  </head><body><h3>Contents</h3><div id=\"mytree\">";
    printf MENU "  <ul><li class=\"[ jstree-open ]\"><a href=\"#\">$outputDirName</a><ul>\n";

    @stack = ();
    $currentParent = "";
    @keys = sort(keys(%fileHash));
    for ($i=0; $i <= $#keys; $i++) {
        $dirPath = $keys[$i];
        $dirName = basename($dirPath);

        # if stack is empty, push first value onto the stack and start branch
        if ($currentParent eq "") {
	    $currentParent = $dirPath;
	    printf MENU "<li><a href=\"#\">$dirName</a><ul>\n";
	}
        # otherwise check to see if subdir of current parent
        elsif ($dirPath =~ /^$currentParent/) {
	    # dirPath is subdir; nest subdir and make current parent
            push(@stack, $currentParent);
            $currentParent = $dirPath;
	    printf MENU "<li><a href=\"#\">$dirName</a><ul>\n";
	}
	else { # not a subdir of the current parent
	    # pop parents until a subdir is found
	    do {
                # close branch
		@files = @{$fileHash{$currentParent}};
		for ($j=0; $j <= $#files; $j++) {
		    $graphName = $files[$j];
		    $graphName =~ s/\.html//;
		    printf MENU "<li class=\"jstree-leaf\" rel=\"file\"><a target=\"right\" href=\"$currentParent/$files[$j]\">$graphName</a></li>\n";
		}
		printf MENU "</ul></li>\n";
		$currentParent = pop(@stack);
	    } until ($dirPath =~ /^$currentParent/ );
	    push(@stack, $currentParent);
	    $currentParent = $dirPath;
	    printf MENU "<li><a href=\"#\">$dirName</a><ul>\n";
	}
    }
    if ($currentParent ne "") {
	do {
	    @files = @{$fileHash{$currentParent}};
	    for ($j=0; $j <= $#files; $j++) {
		$graphName = $files[$j];
		$graphName =~ s/\.html//;
		printf MENU "<li class=\"jstree-leaf\" rel=\"file\"><a target=\"right\" href=\"$currentParent/$files[$j]\">$graphName</a></li>\n";
	    }
	    printf MENU "</ul></li>\n";
	    $currentParent = pop(@stack);
	} until ($currentParent eq "");
    }

    printf MENU "</ul></li></ul></div></body></html>\n";
    close(MENU);
}

sub printUsageAndDie { # no arguments
    printf(STDERR "\nUSAGE: workflowHtmlGenerator (-f|-d|-r) <input_file_or_directory> <output_dir>\n\n");
    printf(STDERR "   -f input_file : a single XML file to be updated\n");
    printf(STDERR "   -d input_dir  : a directory; all XML files inside will be updated\n");
    printf(STDERR "   -r input_dir  : a directory; XML files will be recursively updated from the passed dir\n");
    printf(STDERR "   output_dir    : location to which HTML files will be dumped\n\n");
    printf(STDERR "Note: index.html and menu.html will only be regenerated if using -d or -r\n\n");
    exit 1;
}

################### Parse args and call main sub ###################

if ($#ARGV != 2) { # i.e. !(3 args)
    printUsageAndDie();
}

if (($ARGV[0] eq "-f" && -f $ARGV[1]) ||
    ($ARGV[0] eq "-d" && -d $ARGV[1])) {
    exit(main($ARGV[1], $ARGV[2]));
}

if ($ARGV[0] eq "-r" && -d $ARGV[1]) {
    exit(mainRecurse($ARGV[1], $ARGV[2]));
}

printUsageAndDie();
