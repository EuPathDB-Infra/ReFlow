#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use XML::Twig;
use File::Basename;
use ReFlow::DatasetClass::Datasets;
use ReFlow::DatasetClass::Classes;
use ReFlow::DatasetClass::Template;
use Data::Dumper;
use File::Path;
use File::Copy;

usage() unless scalar(@ARGV) == 5 ||  scalar(@ARGV) == 4;

my ($datasetFile, $classesFile, $datasetClassCategoriesFile, $categoryNamesFile, $doNotValidateXml) = @ARGV;

if (!$doNotValidateXml) {
    system("validateXmlWithRng  $ENV{GUS_HOME}/lib/rng/datasetClass.rng $classesFile") && exit(1);
}

# parse class file
my $classes = ReFlow::DatasetClass::Classes->new($classesFile);

# parse datasets file
my $datasets = ReFlow::DatasetClass::Datasets->new($datasetFile, $classes);
my $classNamesUsed = $datasets->getClassNamesUsed();



# parse categoryNamesFile
open(ANNOT, $categoryNamesFile) or die "Cannot open categoryNames file $categoryNamesFile for reading:$!";
my %categoryNames;
while(<ANNOT>) {
  chomp;
  my @annot = split(/\t/, $_);
  next unless($annot[1]);
  $categoryNames{$annot[1]} = $annot[2];
}
close ANNOT;

# parse datasetCategories file
open(FILE, $datasetClassCategoriesFile) or die "Cannot open datasetClassCategories file $datasetClassCategoriesFile for reading:$!";
my %datasetClassCategories;
while(<FILE>) {
  chomp;
  my @dcc = split(/\t/, $_);
  $datasetClassCategories{$dcc[0]} = $categoryNames{$dcc[1]} ? $categoryNames{$dcc[1]} : $dcc[1];
}
close FILE;


# validate all dataset properties against classes
$datasets->validateAgainstClasses();

my $datasetsFullName = $datasets->getFullName();
my $datasetPropertiesFileName = "$ENV{GUS_HOME}/lib/prop/datasetProperties/${datasetsFullName}.prop";

if (-e $datasetPropertiesFileName) {
  if (-M $datasetPropertiesFileName < -M $datasetFile) {
    print STDERR "File $datasetPropertiesFileName is up to date.\n";
    exit(0);
  } else {
    unlink($datasetPropertiesFileName) || die "Couldn't delete old $datasetPropertiesFileName\n";
  }
}

my ($basename,$path,$suffix) = fileparse($datasetPropertiesFileName, '.prop');
mkpath($path);
open(F, ">$datasetPropertiesFileName.tmp") || die "Can't open file file '$datasetPropertiesFileName.tmp' for writing\n";

foreach my $dataset (@{$datasets->getDatasets()}) {
  my $datasetPropertiesText = $classes->getDatasetPropertiesText($dataset, \%datasetClassCategories);
  print F "$datasetPropertiesText\n\n";
}
close(F);

move("$datasetPropertiesFileName.tmp", $datasetPropertiesFileName) || die "Couldn't move $datasetPropertiesFileName.tmp to $datasetPropertiesFileName\n";

sub usage {

  print "
Create a simple properties file from a dataset file for consumption by the DatasetPresenter system. Provides
for each dataset its _RSRC name as well as its property values.  The presenter system uses the _RSRC name as a key.

Usage:  workflowDataset2PropsFile datasets_file classes_file [-skipXmlValidation]

Where:
  datasets_file:    an xml file containing a set of datasets.  Must be in a file
                    path including lib/xml/datasets/XXX/YYY.xml where XXX is one
                    or more optional subirs, and YYY is the name of the dataset.
                    Files generated from plans will be named like this:
                    XXX/YYY/planFileName.xml

  classes_file:     an xml file containing a set of dataset classes.
  skipXmlValidation: skip the validation of the classes_file

Output: the generated dataset prop file in \$GUS_HOME/lib/prop/datasetProperties

";

  exit(1);
}
