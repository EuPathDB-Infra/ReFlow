#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use XML::Twig;
use XML::Simple;
use File::Basename;
use ReFlow::Dataset::Datasets;
use ReFlow::Dataset::Classes;
use ReFlow::Dataset::Template;
use Data::Dumper;
use File::Path;

usage() unless scalar(@ARGV) == 2 ||  scalar(@ARGV) == 3;

my ($datasetFile, $classesFile, $doNotValidateXml) = @ARGV;

if (!$doNotValidateXml) {
    system("validateXmlWithRng  $ENV{GUS_HOME}/lib/rng/datasetClass.rng $classesFile") && exit(1);
}

# parse class file
my $classes = ReFlow::Dataset::Classes->new($classesFile);

# parse datasets file
my $datasets = ReFlow::Dataset::Datasets->new($datasetFile, $classes);
my $classNamesUsed = $datasets->getClassNamesUsed();

# make graph files target dir
my $datasetsFullName = $datasets->getFullName();
my $graphFilePath = "$ENV{GUS_HOME}/lib/xml/workflow/generated/$datasetsFullName";
mkpath($graphFilePath);
unlink(glob("$graphFilePath/*.xml")); # clean out old xml files

# NEED TO VALIDATE DATASET AGAINST CLASSES

# NEED TO VALIDATE TEMPLATES AGAINST CLASSES

# hash of template->classes_that_use_the_template
my $graphTemplate2classes = $classes->getTemplate2Classes($classNamesUsed);


# process each template that is refered to by any class
foreach my $templateFileName (keys(%$graphTemplate2classes)) {
  my $fullTemplateFileName = "$ENV{GUS_HOME}/lib/xml/workflowTemplates/$templateFileName";
  die "\nError: Classes file $classesFile references template '$templateFileName' which is not found in $ENV{GUS_HOME}/lib/xml/workflowTemplates/" unless -e $fullTemplateFileName;
  my $templateFileAsText = parseAndWriteTemplateFile($fullTemplateFileName);
  my $templates = ReFlow::Dataset::Template::getTemplates($templateFileName);
  foreach my $template (@$templates) {
    $classes->validateClassName($template->getClassName());
    my $templateDatasets = $datasets->getDatasetsByClass($template->getClassName());
    foreach my $dataset (@$templateDatasets) {
      $template->addInstance($dataset);
    }
    $templateFileAsText = $template->substituteInstancesIntoTemplateText($templateFileAsText);
  }

  # subsitute in <depends> elements for <dependsPattern>
  $templateFileAsText = resolveDependsPatterns($templateFileAsText, $templateFileName);

  my ($templateFileBasename,$path,$suffix) = fileparse($templateFileName, '.xml');
  my $graphFile = "$graphFilePath/${templateFileBasename}.xml";
  open(GRAPH, ">$graphFile") || die "Can't open graph file '$graphFile' for writing\n";
  print GRAPH $templateFileAsText;
}


##########################################################################

sub parseAndWriteTemplateFile {
  my ($fullTemplateFileName) = @_;
  my $twig;
  eval {
    $twig= new XML::Twig(pretty_print => 'indented');
    $twig->parsefile($fullTemplateFileName);
  };

  die "Error parsing template file $fullTemplateFileName:$@\n" if $@;

  return $twig->sprint();
}

sub resolveDependsPatterns {
  my ($instantiatedTemplateText, $templateFileName) = @_;

  # parse the text (again!) but this time with the datasets instantiated
  my $xml = new XML::Simple();
  my $data = eval{ $xml->XMLin($instantiatedTemplateText, SuppressEmpty => undef, ForceArray=>['step', 'subgraph', 'depends', 'dependsPattern'])};

#  print Dumper $data;

  # gather all step and subgraph names
  my @stepNames;
  foreach my $stepName (keys(%{$data->{step}})) {
    push(@stepNames, $stepName);
  }

  foreach my $subgraphName (keys(%{$data->{subgraph}})) {
    push(@stepNames, $subgraphName);
  }

  my $expandedPatterns = {};

  # find all dependsPatterns and make the substitution
  foreach my $stepName (keys(%{$data->{step}})) {
    expandPatterns($data->{step}->{$stepName}, \@stepNames, $expandedPatterns, $templateFileName);
  }

  foreach my $subgraphName (keys(%{$data->{subgraph}})) {
    expandPatterns($data->{subgraph}->{$subgraphName}, \@stepNames, $expandedPatterns, $templateFileName);
  }

  # use text substitution to insert the new <depends>
  foreach my $expandedPattern (keys(%$expandedPatterns)) {
    my $newDepends = join("\n", @{$expandedPatterns->{$expandedPattern}});
    $newDepends = "\n$newDepends\n";
    $expandedPattern =~ s/\*/\\*/g;
    $instantiatedTemplateText =~ s|\s+<dependsPattern name=\"$expandedPattern\"/>\s*|$newDepends|g;
#    $instantiatedTemplateText =~ s|\s+<dependsPattern name=\"$expandedPattern|$newDepends|g;
  }
  return $instantiatedTemplateText;
}

# find any step or subgraph that has one or more dependsPattern element
# for each one, expand it, creating depends elements that match the pattern.
# add to the output hash a key for each pattern with values in an array ref
# of step or subgraph names that match.
sub expandPatterns {
  my ($stepOrSubgraph, $stepNames, $outputHash, $templateFileName) = @_;

  foreach my $dependsPatternValue (keys(%{$stepOrSubgraph->{dependsPattern}})) {
    if ($dependsPatternValue =~ /\%/) {
       die "\nError: Template file '$templateFileName' contains <dependsPattern name=\"$dependsPatternValue\"/> that attempts to use the invalid wild card '%'. The correct wildcard is '*'\n";
    }

    my $dependsPatternRegex = $dependsPatternValue;
    # replace * wild card with .+
    my $x = '.+';		# avoid syntax highlighting error
    $dependsPatternRegex =~ s/\*/$x/;

    # find all step or subgraph names that match the pattern
    my @matchingStepNames = grep(/^${dependsPatternRegex}$/, @$stepNames);

    # for all matches, create a new <depends> element
    foreach my $matchingStepName (@matchingStepNames) {
      push(@{$outputHash->{$dependsPatternValue}},
	   "    <depends name=\"$matchingStepName\"/>");
    }

    # if none matched, then replace dependsPattern with a blank
    if (!$outputHash->{$dependsPatternValue}) {
      $outputHash->{$dependsPatternValue} = [""];
    }
  }
}

sub usage {

  print "
Create graph files for a dataset, from graph template files (in \$GUS_HOME)

Usage:  workflowDataset2Graphs datasets_file classes_file [-skipXmlValidation]

Where:
  datasets_file:    an xml file containing a set of datasets.  Must be in a file
                    path including lib/xml/datasets/XXX/YYY.xml where XXX is one
                    or more optional subirs, and YYY is the name of the dataset.
                    Files generated from templates will be named like this:
                    XXX/YYY/templateFileName.xml

  classes_file:     an xml file containing a set of dataset classes.
  skipXmlValidation: skip the validation of the classes_file

Output: the generated workflow xml file in \$GUS_HOME/lib/xml/workflow

";

  exit(1);
}
