#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use XML::Twig;
use XML::Simple;
use File::Basename;
use ReFlow::Dataset::Datasets;
use ReFlow::Dataset::Classes;
use ReFlow::Dataset::Template;
use Data::Dumper;
use File::Path;

usage() unless scalar(@ARGV) == 2;

my ($datasetFile, $classesFile) = @ARGV;

# parse class file
my $classes = ReFlow::Dataset::Classes->new($classesFile);

# parse datasets file
my $datasets = ReFlow::Dataset::Datasets->new($datasetFile);
my $classNamesUsed = $datasets->getClassNamesUsed();

# NEED TO VALIDATE DATASET AGAINST CLASSES

# NEED TO VALIDATE TEMPLATES AGAINST CLASSES

# hash of plan->classes_that_use_the_plan
my $graphPlan2classes = $classes->getPlan2Classes($classNamesUsed);


# process each plan
foreach my $planFileName (keys(%$graphPlan2classes)) {
  my $fullPlanFileName = "$ENV{GUS_HOME}/lib/xml/workflowPlans/$planFileName";
  die "\nError: Classes file $classesFile references plan '$planFileName' which is not found in $ENV{GUS_HOME}/lib/xml/workflowPlans/" unless -e $fullPlanFileName;
  my $planFileAsText = parseAndWritePlanFile($fullPlanFileName);
  my $templates = ReFlow::Dataset::Template::getTemplates($planFileName);
  foreach my $template (@$templates) {
    $classes->validateClassName($template->getClassName());
    my $templateDatasets = $datasets->getDatasetsByClass($template->getClassName());
    foreach my $dataset (@$templateDatasets) {
      $template->addInstance($dataset);
    }
    $planFileAsText = $template->substituteInstancesIntoPlanText($planFileAsText);
  }

  # subsitute in <depends> elements for <dependsPattern>
  $planFileAsText = resolveDependsPatterns($planFileAsText, $planFileName);

  my ($planFileBasename,$path,$suffix) = fileparse($planFileName, '.xml');
  my $datasetsFullName = $datasets->getFullName();
  my $graphFilePath = "$ENV{GUS_HOME}/lib/xml/workflow/$datasetsFullName";
  mkpath($graphFilePath);
  my $graphFile = "$graphFilePath/${planFileBasename}.xml";
  open(GRAPH, ">$graphFile") || die "Can't open graph file '$graphFile' for writing\n";
  print GRAPH $planFileAsText;
}


##########################################################################

sub parseAndWritePlanFile {
  my ($fullPlanFileName) = @_;
  my $twig;
  eval {
    $twig= new XML::Twig(pretty_print => 'indented');
    $twig->parsefile($fullPlanFileName);
  };

  die "Error parsing plan file $fullPlanFileName:$@\n" if $@;

  return $twig->sprint();
}

sub resolveDependsPatterns {
  my ($instantiatedPlanText, $planFileName) = @_;

  # parse the text (again!) but this time with the datasets instantiated
  my $xml = new XML::Simple();
  my $data = eval{ $xml->XMLin($instantiatedPlanText, SuppressEmpty => undef, ForceArray=>['step', 'subgraph', 'depends', 'dependsPattern'])};

#  print Dumper $data;

  # gather all step and subgraph names
  my @stepNames;
  foreach my $stepName (keys(%{$data->{step}})) {
    push(@stepNames, $stepName);
  }

  foreach my $subgraphName (keys(%{$data->{subgraph}})) {
    push(@stepNames, $subgraphName);
  }

  my $expandedPatterns = {};

  # find all dependsPatterns and make the substitution
  foreach my $stepName (keys(%{$data->{step}})) {
    expandPatterns($data->{step}->{$stepName}, \@stepNames, $expandedPatterns);
  }

  foreach my $subgraphName (keys(%{$data->{subgraph}})) {
    expandPatterns($data->{subgraph}->{$subgraphName}, \@stepNames, $expandedPatterns);
  }

  # use text substitution to insert the new <depends>
  foreach my $expandedPattern (keys(%$expandedPatterns)) {
    my $newDepends = join("\n", @{$expandedPatterns->{$expandedPattern}});
    $newDepends = "\n$newDepends\n";
    $expandedPattern =~ s/\*/\\*/g;
    $instantiatedPlanText =~ s|\s+<dependsPattern name=\"$expandedPattern\"/>\s*|$newDepends|g;
#    $instantiatedPlanText =~ s|\s+<dependsPattern name=\"$expandedPattern|$newDepends|g;
  }
  return $instantiatedPlanText;
}

# find any step or subgraph that has one or more dependsPattern element
# for each one, expand it, creating depends elements that match the pattern.
# add to the output hash a key for each pattern with values in an array ref
# of step or subgraph names that match.
sub expandPatterns {
  my ($stepOrSubgraph, $stepNames, $outputHash) = @_;

  foreach my $dependsPatternValue (keys(%{$stepOrSubgraph->{dependsPattern}})) {
    my $dependsPatternRegex = $dependsPatternValue;
    # replace * wild card with .+
    my $x = '.+';		# avoid syntax highlighting error
    $dependsPatternRegex =~ s/\*/$x/;

    # find all step or subgraph names that match the pattern
    my @matchingStepNames = grep(/$dependsPatternRegex/, @$stepNames);

    # for all matches, create a new <depends> element
    foreach my $matchingStepName (@matchingStepNames) {
      push(@{$outputHash->{$dependsPatternValue}},
	   "    <depends name=\"$matchingStepName\"/>");
    }
  }
}

sub usage {

  print "
Create graph files for a dataset, from graph plan files (in \$GUS_HOME)

Usage:  workflowDataset2Graphs datasets_file classes_file

Where:
  datasets_file:    an xml file containing a set of datasets.  Must be in a file
                    path including lib/xml/datasets/XXX/YYY.xml where XXX is one
                    or more optional subirs, and YYY is the name of the dataset.
                    Files generated from plans will be named like this:
                    XXX/YYY/planFileName.xml

  classes_file:     an xml file containing a set of dataset classes.

Output: the generated workflow xml file in \$GUS_HOME/lib/xml/workflow

";

  exit(1);
}
