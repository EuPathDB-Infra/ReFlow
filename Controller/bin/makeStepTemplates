#!/usr/bin/perl

use XML::Simple;
use Data::Dumper;

use strict;

foreach my $xmlfile (@ARGV) {
  my $graph = &parsefile($xmlfile);

  foreach my $step (@{$graph->{step}}) {
    printStepClass($step->{stepClass}, $step->{paramValue});
  }
}

sub parsefile {
  my ($xmlfile) = @_;

  print STDERR "parsing $xmlfile\n";
  my $simple = XML::Simple->new();
  my $graph = $simple->XMLin($xmlfile, forcearray => 1,
			     KeyAttr => {sqlValue=>'+name'});

  return $graph;
}

sub printStepClass {
  my ($className, $paramValues) = @_;

  my ($a,$l,$w,$p) = split(/\:\:/,$className);

  my $paramVals;
  my $paramDecl;
  foreach my $paramValue (@$paramValues) {
    my $param = $paramValue->{name};
    $paramVals .= "  my \$$param = \$self->getParamValue('$param');\n";
    $paramDecl .= "          '$param',\n";
  }

my $template =
"package ApiCommonData::Load::WorkflowSteps::$p;

\@ISA = (ApiCommonData::Load::WorkflowSteps::WorkflowStep);
use strict;
use ApiCommonData::Load::WorkflowSteps::WorkflowStep;

TEMPLATE
sub run {
  my (\$self, \$test) = \@_;

  # get parameters
$paramVals
  # get global properties
  my \$ = \$self->getSharedConfig('');

  # get step properties
  my \$ = \$self->getConfig('');

  if (\$test) {

  }

  \$self->runCmd(\$test, \$cmd);
  \$self->runPlugin(\$test, '', \$args);

}

sub getParamsDeclaration {
  return (
$paramDecl         );
}

sub getConfigDeclaration {
  return (
         # [name, default, description]
         # ['', '', ''],
         );
}

sub restart {
}

sub undo {

}

sub getDocumentation {
}
";

  my $file = "$p.pm";
  if (! -e $file) {
    open(F, ">$file");
    print F $template;
    close(F)
  }
}
