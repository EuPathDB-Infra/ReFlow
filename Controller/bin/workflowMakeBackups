#!/usr/bin/perl

use strict;

my ($dontcare, $workflow_home) = @ARGV;

usage() unless $workflow_home;

my $backupDir = "$workflow_home/backups";

die "workflow home dir '$workflow_home' does not exist" unless -d $workflow_home;

die "workflow backup dir '$backupDir' does not exist" unless -d "$backupDir";

if (! -e "$backupDir/README") {
  open(F, ">$backupDir/README");
  print F "
This directory contains backups automatically created each time the workflow
runs.  Each backup directory contains:
 - config.tar.gz       backup of workflow_home_dir/config.
 - workflow.tar.gz     backup of the graph xml files in \$GUS_HOME/lib/xml/workflow.
 - datasetLoaders.tar.gz  backup of the datasetLoader xml files in \$GUS_HOME/lib/xml/datasetLoaders.

These backups become very useful if you are attempting to upgrade the graph or
config and are getting errors that the graph has changed illegally.  In that
case, restore from these backups, UNDO the steps that are causing difficulty,
and unrestore.

Use the workflowRestoreBackup command to do a restore.

";
  close(F);
}

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year += 1900;
$mon += 1;
my $time = sprintf("%4d-%02d-%02d_%02d.%02d.%02d", $year,$mon,$mday,$hour,$min,$sec);

$backupDir = "$backupDir/$time";
mkdir("$backupDir");

# backup home_dir/config and $GUS_HOME/lib/xml/workflow
backup('workflow', "$ENV{GUS_HOME}/lib/xml/workflow");
backup('config', "$workflow_home/config");
backupIfExists('datasetLoaders', "$ENV{GUS_HOME}/lib/xml/datasetLoaders");
print STDERR "Backup done.";

sub backupIfExists {
  my ($target, $source) = @_;
  if ( -e $source ) {
    backup($target, $source);
  }
}

sub backup {
  my ($target, $source) = @_;

  &runCmd("cp -rp $source $backupDir/$target");
  chdir("$backupDir");
  &runCmd("rm -r $backupDir/$target/.html") if -e "$backupDir/$target/.html";
  &runCmd("tar czfh $target.tar.gz $target");
  &runCmd("rm -r $target");
}

sub runCmd {
  my ($cmd) = @_;

  print STDERR "$cmd\n";
  system($cmd) and die "Failed running $cmd:\n $?";
}



sub usage {
  print STDERR "

Make a backup of critical workflow running dirs:
   workflow_home/config
   \$GUS_HOME/lib/xml/workflow

usage:  workflowMakeBackups -h workflow_home_dir

";

exit(1);
}
