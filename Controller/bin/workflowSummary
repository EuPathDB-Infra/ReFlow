#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";

use strict;
use ReFlow::Controller::WorkflowHandle;

# these should be imported from someplace, not duplicated here
my $READY = 'READY';      # my parents are not done yet  -- default state
my $ON_DECK = 'ON_DECK';  # my parents are done, but there is no slot for me
my $FAILED = 'FAILED';
my $DONE = 'DONE';
my $RUNNING = 'RUNNING';

&usage unless (scalar(@ARGV) == 2 && $ARGV[0] eq '-h');

my $homeDir = $ARGV[1];
&usage unless $homeDir;
my $workflow = ReFlow::Controller::WorkflowHandle->new($homeDir);

$workflow->getDbState();
$workflow->error("Workflow is currently initializing step table.  Try again when it is done.") if $workflow->{initializing_step_table};

my $mode = $workflow->{test_mode}? "test" : "real";
my $db = $workflow->getGusConfig('dbiDsn');
my $undoStepName = 'no';
my $sql;

if ($workflow->{undo_step_id}) {
    $sql = "
select name
from $workflow->{workflowStepTable}
where workflow_step_id = $workflow->{undo_step_id}";
    ($undoStepName) = $workflow->runSqlQuery_single_array($sql); 
}

my $sharedSql = "
select count(*)
from $workflow->{workflowStepTable}
where workflow_id = $workflow->{workflow_id}";

# total steps count
my ($totalCount) = $workflow->runSqlQuery_single_array($sharedSql);

# offline steps count
    $sql = "$sharedSql
and off_line = 1
";
my ($offlineCount) = $workflow->runSqlQuery_single_array($sql);

# ready steps count
    $sql = "$sharedSql
and state = '$READY'
";
my ($readyCount) = $workflow->runSqlQuery_single_array($sql);

# on deck steps count
    $sql = "$sharedSql
and state = '$ON_DECK'
";
my ($ondeckCount) = $workflow->runSqlQuery_single_array($sql);

# running steps count
    $sql = "$sharedSql
and state = '$RUNNING'
";
my ($runningCount) = $workflow->runSqlQuery_single_array($sql);

# done steps count
    $sql = "$sharedSql
and state = '$DONE'
";
my ($doneCount) = $workflow->runSqlQuery_single_array($sql);

# failed steps count
    $sql = "$sharedSql
and state = '$FAILED'
";
my ($failedCount) = $workflow->runSqlQuery_single_array($sql);

# stop afters steps count
    $sql = "$sharedSql
and stop_after = 1
";
my ($stopAftersCount) = $workflow->runSqlQuery_single_array($sql);

# stopped count
    $sql = "$sharedSql
and stop_after = 1
and state = '$DONE'
";
my ($stoppedCount) = $workflow->runSqlQuery_single_array($sql);



print "

    Workflow: $workflow->{name} $workflow->{version}
    Database: $db
          ID: $workflow->{workflow_id}
       State: $workflow->{state}
        Mode: $mode
        Undo: $undoStepName
Host machine: $workflow->{host_machine}
  Process ID: $workflow->{process_id}

 Total steps: $totalCount
    OFF-LINE: $offlineCount
       READY: $readyCount
     ON_DECK: $ondeckCount
     RUNNING: $runningCount
        DONE: $doneCount
      FAILED: $failedCount
 STOP AFTERS: $stopAftersCount
     STOPPED: $stoppedCount

  Undo steps:
       READY:
     ON_DECK:
     RUNNING:
        DONE:
      FAILED:
     
";

sub usage {
    print "

Get a brief summary of the state of a workflow.

Usage: workflowSummary -h workflow_home_dir

";
    exit(1);
}




