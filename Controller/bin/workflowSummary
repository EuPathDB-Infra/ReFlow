#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";

use strict;
use ReFlow::Controller::WorkflowHandle;

# these should be imported from someplace, not duplicated here
my $READY = 'READY';      # my parents are not done yet  -- default state
my $ON_DECK = 'ON_DECK';  # my parents are done, but there is no slot for me
my $FAILED = 'FAILED';
my $DONE = 'DONE';
my $RUNNING = 'RUNNING';

&usage unless ((scalar(@ARGV) == 2 || scalar(@ARGV) == 4) && $ARGV[0] eq '-h');

my $dbName;
if (scalar(@ARGV) == 4) {
  &usage unless ($ARGV[2] eq '-db');

  $dbName = $ARGV[3];
}

my $homeDir = $ARGV[1];
&usage unless $homeDir;
my $workflow = ReFlow::Controller::WorkflowHandle->new($homeDir, $dbName);

$workflow->getDbState();
$workflow->error("Workflow is currently initializing step table.  Try again when it is done.") if $workflow->{initializing_step_table};

my $mode = $workflow->{test_mode}? "test" : "real";
my $db = $workflow->getGusConfig('dbiDsn');
my $undoStepName = 'no';
my $sql;

if ($workflow->{undo_step_id}) {
    $sql = "
select name
from $workflow->{workflowStepTable}
where workflow_step_id = $workflow->{undo_step_id}";
    ($undoStepName) = $workflow->_runSqlQuery_single_array($sql); 
}

my $sharedSql = "
select count(*)
from $workflow->{workflowStepTable}
where workflow_id = $workflow->{workflow_id}";

# total steps count
my ($totalCount) = $workflow->_runSqlQuery_single_array($sharedSql);

# total undo steps count
$sql = "$sharedSql
and undo_state is not null
";
my ($totalCountU) = $workflow->_runSqlQuery_single_array($sharedSql);

my ($readyCount, $ondeckCount, $runningCount, $doneCount, $failedCount, $lastDoneName, $lastDoneTime) = getValues('state');


# offline steps count
$sql = "$sharedSql
and off_line = 1
";
my ($offlineCount) = $workflow->_runSqlQuery_single_array($sql);

# undo offline steps count
$sql = "$sharedSql
and undo_off_line = 1
";
my ($offlineCountU) = $workflow->_runSqlQuery_single_array($sql);

# stop afters steps count
    $sql = "$sharedSql
and stop_after = 1
";
my ($stopAftersCount) = $workflow->_runSqlQuery_single_array($sql);

# undo stop afters steps count
    $sql = "$sharedSql
and undo_stop_after = 1
";
my ($stopAftersCountU) = $workflow->_runSqlQuery_single_array($sql);

# stopped count
    $sql = "$sharedSql
and stop_after = 1
and state = '$DONE'
";
my ($stoppedCount) = $workflow->_runSqlQuery_single_array($sql);

# undo stopped count
    $sql = "$sharedSql
and undo_stop_after = 1
and undo_state = '$DONE'
";
my ($stoppedCountU) = $workflow->_runSqlQuery_single_array($sql);

# if RUNNING in db, check for existing process
my $state = $workflow->{state};
if ($state eq $RUNNING) {
    if ($workflow->{process_id} ) {
	system("ps -p $workflow->{process_id} > /dev/null");
	$state = "STOPPED" if $? >> 8;
    } else {
	$state = 'UNKNOWN';
    }
}

my $undoReport = "";
if ($undoStepName ne 'no') {
  my ($readyCountU, $ondeckCountU, $runningCountU, $doneCountU, $failedCountU, $lastDoneNameU, $lastDoneTimeU) = getValues('undo_state');

  $undoReport = "
           UNDO:
    Total steps: $totalCountU
           DONE: $doneCountU
         FAILED: $failedCountU
        RUNNING: $runningCountU
        ON_DECK: $ondeckCountU
       OFF-LINE: $offlineCountU
          READY: $readyCountU
    STOP AFTERS: $stopAftersCountU
        STOPPED: $stoppedCountU
 Last DONE step: $lastDoneNameU
        done at: $lastDoneTimeU
";
}

print "
       Workflow: $workflow->{name} $workflow->{version}
       Database: $db
             ID: $workflow->{workflow_id}
          State: $state
           Mode: $mode
           Undo: $undoStepName
   Host machine: $workflow->{host_machine}
     Process ID: $workflow->{process_id}

    Total steps: $totalCount
           DONE: $doneCount
         FAILED: $failedCount
        RUNNING: $runningCount
        ON_DECK: $ondeckCount
       OFF-LINE: $offlineCount
          READY: $readyCount
    STOP AFTERS: $stopAftersCount
        STOPPED: $stoppedCount
 Last DONE step: $lastDoneName
        done at: $lastDoneTime
$undoReport
";

sub getValues {
    my ($stateCol) = @_;

# ready steps count
    $sql = "$sharedSql
and $stateCol = '$READY'
";
    my ($readyCount) = $workflow->_runSqlQuery_single_array($sql);

# on deck steps count
    $sql = "$sharedSql
and $stateCol = '$ON_DECK'
";
    my ($ondeckCount) = $workflow->_runSqlQuery_single_array($sql);

# running steps count
    $sql = "$sharedSql
and $stateCol = '$RUNNING'
";
    my ($runningCount) = $workflow->_runSqlQuery_single_array($sql);

# done steps count
    $sql = "$sharedSql
and $stateCol = '$DONE'
";
    my ($doneCount) = $workflow->_runSqlQuery_single_array($sql);

# failed steps count
    $sql = "$sharedSql
and $stateCol = '$FAILED'
";
    my ($failedCount) = $workflow->_runSqlQuery_single_array($sql);

# last done step (just get the first row returned)
    $sql = "select name, TO_CHAR(end_time,'MM/DD/YYYY HH24:MI:SS')
from $workflow->{workflowStepTable}
where workflow_id = $workflow->{workflow_id}
and $stateCol = '$DONE'
and end_time is not null
order by end_time desc
";
    my ($lastDoneName, $lastDoneTime) = $workflow->_runSqlQuery_single_array($sql);

    return ($readyCount, $ondeckCount, $runningCount, $doneCount, $failedCount, $lastDoneName, $lastDoneTime);
}

sub usage {
    print "

Get a brief summary of the state of a workflow.

Usage: workflowSummary -h workflow_home_dir [-db [login[/pass]@]instance]

";
    exit(1);
}




