#!/usr/bin/perl

use strict;

usage unless scalar(@argv) == 3;

my ($name, $xmlFile, $rtcFile) = @ARGV;

my $MACROSYM = '&&';

my $templateConfig = parseRtcFile($rtcFile);

open(XML, $xmlFile) || die "Can't open xml_file '$xmlFile'\n";
my $newXml;
while(<XML>) {
  next if /\<workflow/;
  next if /\<\/workflow/;
  die "Error: template XML file may not contain a <templateInstance>\n"
    if /\<templateInstance/;
  die "Error: template XML file may not contain a <templateDepends>\n"
    if /\<templateDepends/;
  $newXml .= substituteTemplateMacros($_, $templateConfig);
}

print $newXml;

sub parseRtcFile {
  my ($name, $rtcFile) = @_;

  my $config;
  open(RTC, $rtcFile) || die "Can't open rtc_file '$rtcFile'\n";
  my $found;
  while(<RTC>) {
    if (/\>$name/) {
      die "duplicate stanza for '$name' found\n" if $done;
      $found = 1;
    } elsif ($found && /\/\//) {
      $done = 1;
    } elsif ($found) {
      chomp;
      /(.*?)\=(.*)/ || die "invalid format on line $. of rtc_file '$rtcFile'\n";
      my $key = $1;
      die "duplicate key '$key' found in stanza for '$name'\n"
	if $config->{$key};
      $config->{$key} = $2;
    }
  }
  return $config;
}

sub substituteTemplateMacros {
  my ($line, $config) = @_;

  return $line unless $line =~ /$MACROSYM/;
  foreach my $configName (keys(%$config)) {
    $line =~ s/$config->{$configValue}/$MACROSYM$config->{$configName}$MACROSYM/g;
  }
  die "can't resolve a template macro in line $. of template xml_file: $line\n" if $line =~ /$MACROSYM/;
  return $line;
}


# validate template xml against .rng
# check that it does not have any <templateInstance> elements

# args: name, xmlFile, rtcFile
# parse .rtc
# subsitute macros
# return xml fragment on stdout
# workflowResolveMasters
