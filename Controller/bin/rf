#!/usr/bin/perl

use strict;

my $workflowDir = $ENV{WORKFLOW_DIR};
unless($workflowDir) {
  die "rf requires ENVIRONMENT Variable WORKFLOW_DIR";
}

my @actions = ("list", "run", "undo", "reset", "set", "log", "log-f", "summary");
my @listable = ("failed", "done", "ready", "on_deck", "running");
my @modes = ("real", "test");
my @states = ("ready", "kill", "offline", "online", "stopafter", "resume");
my @loggable = ("err", "tailerr", "step", "tailstep", "controller", "pilot");

my $action = $ARGV[0];
unless($action) {
  &usage();
  exit;
}

&checkValue(\@actions, $action);

my $cmd;

if($action eq "list") {
  my $listVal = $ARGV[1];
  &checkValue(\@listable, $listVal);

  $listVal = uc($listVal);
  $cmd = "workflow -h $workflowDir -s1 $listVal |sort";
}
elsif($action eq "run" || $action eq "undo" || $action eq "reset") {
  my $modeVal = $ARGV[1];
  &checkValue(\@modes, $modeVal);

  die "Mode must be 'test' for reset action" if($action eq "reset" && $modeVal ne "test");

  my $mode = $modeVal eq "test" ? "-t" : "-r";
  $mode = '-reset' if($action eq 'reset');

  $cmd = "workflow -h $workflowDir $mode";

  if($action eq 'undo') {
    unless($ARGV[2]) {
      &usage();
      die "<step pattern> is required but missing";
    }
  }

  $cmd = $cmd . " -u " . $ARGV[2] if($action eq 'undo');

}
elsif($action eq "set") {
  my $state = $ARGV[1];
  &checkValue(\@states, $state);

  unless($ARGV[2]) {
    &usage();
    die "<step pattern> is required but missing";
  }

  $cmd = "workflowstep -h $workflowDir -p $ARGV[2] $state";
  $cmd = $cmd . " -u" if($ARGV[3] eq 'undo');

}

elsif($action eq "log" || $action eq 'log-f') {
  my $toLog = $ARGV[1];
  &checkValue(\@loggable, $toLog);

  my $file = "step.err";
  if($toLog =~ /step/) {
    $file = "step.log";
  }

  my $stepName = $ARGV[2];
  my $requireStep = 1;

  if($toLog eq 'controller' || $toLog eq 'pilot') {
    $requireStep = 0;
  }

  if($requireStep && !$stepName) {
    &usage();
    die "<step pattern> is required but missing";
  }

    if($action eq 'log') {
    $cmd = "less +G";
  }
  else {
    $cmd = "tail -f";
  }


  if($toLog eq 'controller' || $toLog eq 'pilot') {
    $cmd = "$cmd $workflowDir/logs/${toLog}.log";
  }
  else {
    $cmd = "$cmd $workflowDir/steps/$stepName/$file";
  }
}
elsif($action eq "summary") {
  $cmd = "workflow -h $workflowDir -q && workflow -h $workflowDir -s 'ON_DECK,READY,FAILED'";
}


else {
  die "Whoops... You specified an incorrect command line action: $action";
}

#print $cmd . "\n";
system($cmd);


sub usage {
  print "usage:

rf list [ready|on_deck|running|failed|done]
  workflow -h <workflow dir> -s1 [READY|ON_DECK|RUNNING|FAILED|DONE] |sort

---------------------------------------------------

rf run [real|test]
  workflow -h <workflow dir> [-t|-r]

----------------------------------------------------

rf undo [test|real] <step name>
  workflow -h <workflow dir> [-t|-r] -u <step name>

----------------------------------------------------

rf reset test
  workflow -h <workflow dir> -t -reset

---------------------------------------------------

rf set [ready|kill|offline|online|stopafter|resume] <stepname_pattern> [undo]
  workflowstep -h workflow_dir -p stepname_pattern [ready|kill|offline|online|stopafter|resume] [-u]

  NOTE: this is handy to chain together with list command like:
  rf list failed 2>/dev/null |while read STEP; do echo rf set ready $STEP; done

---------------------------------------------------

rf log|log-f [err|step|controller|pilot] [<stepname_pattern>]
  log-f will follow the file (tail -f)
  examples:
  rf log controller
  rf log-f controller
  rf log err global.taxonomy.runPlugin
  rf log-f step global.taxonomy.runPlugin
---------------------------------------------------

rf summary
  workflowstep -h workflow_dir -q && workflowstep -h workflow_dir -s READY,FAILED,ON_DECK
";

}

sub checkValue {
  my ($a, $t) = @_;

  foreach(@$a) {
    return 1 if($_ eq $t);
  }

  &usage();
  die("Whoops... You specified an incorrect command line option: [$t].  Viable options are " . join(",", @$a));
}

